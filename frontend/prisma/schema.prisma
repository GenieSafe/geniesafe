generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // schemas  = ["auth", "public"]
  schemas  = ["public"]
}

model user {
  id                     String                   @id @db.Uuid
  email                  String
  walletAddress          String                   @unique
  password               String
  firstName              String
  lastName               String
  identityNumber         String?
  beneficiaries          beneficiary[]
  validators             validator[]
  verifier               verifier[]
  wallet_recovery_config wallet_recovery_config[]
  wills                  will[]

  @@map("user")
  @@schema("public")
}

model will {
  id              Int           @id @default(autoincrement())
  ownerUserId     String        @db.Uuid
  title           String?
  createdAt       DateTime?     @default(now())
  updatedAt       DateTime?     @default(now())
  isActive        Boolean       @default(false)
  isValidated     Boolean       @default(false)
  deployedAt      DateTime?
  deployedAtBlock String?
  beneficiaries   beneficiary[]
  validators      validator[]
  owner           user          @relation(fields: [ownerUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("will")
  @@schema("public")
}

model beneficiary {
  id                Int     @id @default(autoincrement())
  willId            Int
  percentage        Float
  beneficiaryUserId String? @db.Uuid
  user              user?   @relation(fields: [beneficiaryUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  will              will    @relation(fields: [willId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("beneficiary")
  @@schema("public")
}

model validator {
  id              Int     @id @default(autoincrement())
  validatorUserId String? @db.Uuid
  willId          Int
  isValidated     Boolean @default(false)
  user            user?   @relation(fields: [validatorUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  will            will    @relation(fields: [willId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("validator")
  @@schema("public")
}

model verifier {
  id                     Int                    @id @default(autoincrement())
  verifierUserId         String                 @db.Uuid
  configId               Int
  isVerified             Boolean                @default(false)
  verifiedAt             DateTime?
  user                   user                   @relation(fields: [verifierUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wallet_recovery_config wallet_recovery_config @relation(fields: [configId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("verifier")
  @@schema("public")
}

model relationship {
  id   Int    @id @default(autoincrement())
  name String

  @@map("relationship")
  @@schema("public")
}

model wallet_recovery_config {
  id          Int        @id @default(autoincrement())
  ownerUserId String     @unique @db.Uuid
  privateKey  String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
  isActive    Boolean    @default(false)
  isVerified  Boolean    @default(false)
  verifiers   verifier[]
  owner       user       @relation(fields: [ownerUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("wallet_recovery_config")
  @@schema("public")
}
