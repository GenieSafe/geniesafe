/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Will {
  export type WillDataStruct = {
    id: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    updatedAt: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    isValidated: PromiseOrValue<boolean>;
    deployedAt: PromiseOrValue<BigNumberish>;
    deployedAtBlock: PromiseOrValue<string>;
  };

  export type WillDataStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    owner: string;
    title: string;
    createdAt: BigNumber;
    updatedAt: BigNumber;
    isActive: boolean;
    isValidated: boolean;
    deployedAt: BigNumber;
    deployedAtBlock: string;
  };
}

export interface WillInterface extends utils.Interface {
  functions: {
    "createWill(address,string,uint256,uint256,bool,bool,uint256,string)": FunctionFragment;
    "getWill(uint256)": FunctionFragment;
    "updateWill(uint256,string,bool)": FunctionFragment;
    "willCount()": FunctionFragment;
    "wills(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createWill"
      | "getWill"
      | "updateWill"
      | "willCount"
      | "wills"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createWill",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWill",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "willCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wills",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "createWill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateWill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "willCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wills", data: BytesLike): Result;

  events: {};
}

export interface Will extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WillInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createWill(
      owner: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      isValidated: PromiseOrValue<boolean>,
      deployedAt: PromiseOrValue<BigNumberish>,
      deployedAtBlock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Will.WillDataStructOutput]>;

    updateWill(
      id: PromiseOrValue<BigNumberish>,
      newTitle: PromiseOrValue<string>,
      newIsValidated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    willCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    wills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        owner: string;
        title: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        isActive: boolean;
        isValidated: boolean;
        deployedAt: BigNumber;
        deployedAtBlock: string;
      }
    >;
  };

  createWill(
    owner: PromiseOrValue<string>,
    title: PromiseOrValue<string>,
    createdAt: PromiseOrValue<BigNumberish>,
    updatedAt: PromiseOrValue<BigNumberish>,
    isActive: PromiseOrValue<boolean>,
    isValidated: PromiseOrValue<boolean>,
    deployedAt: PromiseOrValue<BigNumberish>,
    deployedAtBlock: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWill(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Will.WillDataStructOutput>;

  updateWill(
    id: PromiseOrValue<BigNumberish>,
    newTitle: PromiseOrValue<string>,
    newIsValidated: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  willCount(overrides?: CallOverrides): Promise<BigNumber>;

  wills(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      BigNumber,
      string
    ] & {
      id: BigNumber;
      owner: string;
      title: string;
      createdAt: BigNumber;
      updatedAt: BigNumber;
      isActive: boolean;
      isValidated: boolean;
      deployedAt: BigNumber;
      deployedAtBlock: string;
    }
  >;

  callStatic: {
    createWill(
      owner: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      isValidated: PromiseOrValue<boolean>,
      deployedAt: PromiseOrValue<BigNumberish>,
      deployedAtBlock: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getWill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Will.WillDataStructOutput>;

    updateWill(
      id: PromiseOrValue<BigNumberish>,
      newTitle: PromiseOrValue<string>,
      newIsValidated: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    willCount(overrides?: CallOverrides): Promise<BigNumber>;

    wills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        BigNumber,
        string
      ] & {
        id: BigNumber;
        owner: string;
        title: string;
        createdAt: BigNumber;
        updatedAt: BigNumber;
        isActive: boolean;
        isValidated: boolean;
        deployedAt: BigNumber;
        deployedAtBlock: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    createWill(
      owner: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      isValidated: PromiseOrValue<boolean>,
      deployedAt: PromiseOrValue<BigNumberish>,
      deployedAtBlock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateWill(
      id: PromiseOrValue<BigNumberish>,
      newTitle: PromiseOrValue<string>,
      newIsValidated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    willCount(overrides?: CallOverrides): Promise<BigNumber>;

    wills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createWill(
      owner: PromiseOrValue<string>,
      title: PromiseOrValue<string>,
      createdAt: PromiseOrValue<BigNumberish>,
      updatedAt: PromiseOrValue<BigNumberish>,
      isActive: PromiseOrValue<boolean>,
      isValidated: PromiseOrValue<boolean>,
      deployedAt: PromiseOrValue<BigNumberish>,
      deployedAtBlock: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateWill(
      id: PromiseOrValue<BigNumberish>,
      newTitle: PromiseOrValue<string>,
      newIsValidated: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    willCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wills(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
