/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Will, WillInterface } from "../Will";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "greeting",
        type: "string",
      },
    ],
    name: "LogMessage",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040527fdf2f43000ad262ff927c671ed83129f9054af075e5d3add03a2ba7116e719a513360405161003391906100de565b60405180910390a161010c565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061006b82610040565b9050919050565b61007b81610060565b82525050565b600082825260208201905092915050565b7f48656c6c6f20457468657265756d210000000000000000000000000000000000600082015250565b60006100c8600f83610081565b91506100d382610092565b602082019050919050565b60006040820190506100f36000830184610072565b8181036020830152610104816100bb565b905092915050565b60428061011a6000396000f3fe608060405236600a57005b00fea264697066735822122046ad964e505b93ad8772b80036dadcc1762de108ae882dc938e5ca5830ed33ac64736f6c63430008090033";

type WillConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WillConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Will__factory extends ContractFactory {
  constructor(...args: WillConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Will> {
    return super.deploy(overrides || {}) as Promise<Will>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Will {
    return super.attach(address) as Will;
  }
  override connect(signer: Signer): Will__factory {
    return super.connect(signer) as Will__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WillInterface {
    return new utils.Interface(_abi) as WillInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Will {
    return new Contract(address, _abi, signerOrProvider) as Will;
  }
}
